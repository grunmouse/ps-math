%математические функции

/E 2.718281828459 def
/PI 3.14159265358979 def

/sq {
	dup mul
} bind def

/sign {
	dup
	0 ne
	{
		0 le
		{-1}{1}
		ifelse
	}
	{0}
	ifelse
} bind def

/tan {
	dup sin exch cos div
} bind def

/cot {
	dup cos exch sin div
} bind def

%упорядочивает пару чисел в стеке так, чтобы в вершине оказалось большее из них
/max {
	2 copy
	%[a, c, a, c]
	gt %a>c
	{
		exch
	}
	if
} def

%упорядочивает пару чисел в стеке так, чтобы в вершине оказалось меньшее из них
/min {
	2 copy
	%[a, c, a, c]
	lt %a<c
	{
		exch
	}
	if
} def

%Инкремент вершины стека или значения по имени из вершины стека
/inc {
	dup type
	<<
		/nametype {
			dup 
			load
			inc
			def
		}
		/integertype {1 add}
		/realtype {1 add}
	>>
	exch get exec
} def

%Декремент вершины стека или значения по имени из вершины стека
/dec {
	dup type
	<<
		/nametype {
			dup 
			cvx exec
			dec
			def
		}
		/integertype {1 sub}
		/realtype {1 sub}
	>>
	exch get exec
} def


%[x, y] находит ближайшее число меньше или равное x, кратное y
/mfloor {
	exch
	%(floor)
	floor
	cvi
	%[y, x]
	dup
	%[y, x, x]
	3 -1 roll
	%[x, x, y]
	mod
	%[x, x mod y]
	sub
} def
%[x - x mod y]

%[x, y]
/mceil {
	exch
	ceiling
	cvi
	%[y, x]
	exch
	2 copy
	%[x, y, x, y]
	mod
	%[x, y, x mod y]
	dup
	0 eq
	%then
	{
		%[x, y, x mod y]
		dup dup
		%[x]
	}
	%else
	{
		%[x, y, x mod y]
		sub
		add
		%[x + y - x mod y]
	}
	ifelse
} def

%[a, b, eps] 
/approx {
	3 1 roll
	%[eps, a, b]
	sub abs
	%[eps, diff]
	ge
} def
%[abs(a-b)<=eps]